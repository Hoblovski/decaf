// Decaf grammar

%Jpackage decaf.parsing

%{
package decaf.parsing;

import decaf.tree.Tree.*;
import decaf.tree.*;
import decaf.error.*;
import java.util.*;
%}

%Jclass DecafParser
%Jextends AbstractParser
%Jinterface DecafTokens
//%next nextToken()
//%get token
%Jsemantic SemValue

%token VOID   		BOOL  		INT			STRING  	CLASS
%token NULL   		EXTENDS		THIS   		WHILE   	FOR
%token IF     		ELSE     	RETURN 		BREAK   	NEW
%token PRINT  		READ_INTEGER     		READ_LINE
%token BOOL_LIT		INT_LIT 	STRING_LIT
%token IDENTIFIER  	AND    		OR    		STATIC  	INSTANCE_OF
%token LESS_EQUAL   GREATER_EQUAL  			EQUAL   	NOT_EQUAL
%token '+'  '-'  '*'  '/'  '%'  '='  '>'  '<'  '.'
%token ','  ';'  '!'  '('  ')'  '['  ']'  '{'  '}'

%left OR
%left AND
%nonassoc EQUAL NOT_EQUAL
%nonassoc LESS_EQUAL GREATER_EQUAL '<' '>'
%left  '+' '-'
%left  '*' '/' '%'
%nonassoc UMINUS '!'
%nonassoc '[' '.'
%nonassoc ')' EMPTY
%nonassoc ELSE

%start TopLevel

%%

// Classes and fields

TopLevel		:	ClassList
					{
						tree = new TopLevel($1.classList, $1.pos);
					}
				;

ClassList       :	ClassList ClassDef
					{
						$$ = $1;
						$$.classList.add($2.clazz);
					}
                |	ClassDef
                	{
                		$$.classList = new ArrayList<>();
                		$$.classList.add($1.clazz);
                		$$.pos = $1.clazz.pos;
                	}
                ;

ClassDef        :	CLASS Id ExtendsClause '{' FieldList '}'
					{
						$$.clazz = new ClassDef($2.id, Optional.ofNullable($3.id), $5.fieldList, $1.pos);
					}
                ;

ExtendsClause	:	EXTENDS Id
					{
						$$ = $2;
					}
                |	/* empty */
                	{
                	    $$.id = null;
                	}
                ;

FieldList       :	FieldList Var ';'
					{
					    $$ = $1;
						$$.fieldList.add(new VarDef($2.var));
					}
				|	FieldList MethodDef
					{
					    $$ = $1;
						$$.fieldList.add($2.field);
					}
                |	/* empty */
                	{
                		$$.fieldList = new ArrayList<>();
                	}
                ;

Var        		:	Type Id
					{
						$$.var = new Var($1.type, $2.id, $2.pos);
					}
				;

MethodDef    	:	STATIC Type Id '(' VarList ')' Block
					{
						$$.field = new MethodDef(true, $3.id, $2.type, $5.varList, $7.block, $3.pos);
					}
				|	Type Id '(' VarList ')' Block
					{
						$$.field = new MethodDef(false, $2.id, $1.type, $4.varList, $6.block, $2.pos);
					}
                ;

VarList         :	VarList1
                    {
                        $$ = $1;
                    }
                |	/* empty */
                	{
                		$$.varList = new ArrayList<>();
                	}
                ;

VarList1    	:	VarList1 ',' Var
					{
						$$ = $1;
						$$.varList.add(new LocalVarDef($3.var));
					}
                |	Var
                	{
                		$$.varList = new ArrayList<>();
						$$.varList.add(new LocalVarDef($1.var));
                	}
                ;

// Types

Type            :	INT
					{
						$$.type = new TInt($1.pos);
					}
                |	BOOL
                	{
                		$$.type = new TBool($1.pos);
                	}
                |	STRING
                	{
                		$$.type = new TString($1.pos);
                	}
				|	VOID
                	{
                		$$.type = new TVoid($1.pos);
                	}
                |	CLASS Id
                	{
                		$$.type = new TClass($2.id, $1.pos);
                	}
                |	Type '[' ']'
                	{
                		$$.type = new TArray($1.type, $1.type.pos);
                	}
                ;

// Statements

Stmt		    :	Var ';'
					{
						$$.stmt = new LocalVarDef($1.var);
					}
				|	Block
				    {
				        $$.stmt = $1.block;
				    }
                |	SimpleStmt ';'
                	{
                		if ($1.stmt == null) {
                			$$.stmt = new Skip($2.pos);
                		}
                	}
                |	IF '(' Expr ')' Stmt ElseClause
					{
						$$.stmt = new If($3.expr, $5.stmt, Optional.ofNullable($6.stmt), $1.pos);
					}
                |	WHILE '(' Expr ')' Stmt
					{
						$$.stmt = new While($3.expr, $5.stmt, $1.pos);
					}
                |	FOR '(' SimpleStmt ';' Expr ';'	SimpleStmt ')' Stmt
					{
						$$.stmt = new For($3.stmt, $5.expr, $7.stmt, $9.stmt, $1.pos);
					}
				|	BREAK ';'
					{
						$$.stmt = new Break($1.pos);
					}
                |	RETURN ExprOpt ';'
					{
						$$.stmt = new Return(Optional.ofNullable($2.expr), $1.pos);
					}
                |	PRINT '(' ExprList ')' ';'
					{
						$$.stmt = new Print($3.exprList, $1.pos);
					}
                ;

Block       	:	'{' StmtList '}'
					{
						$$.block = new Block($2.stmtList, $1.pos);
					}
                ;

StmtList        :	StmtList Stmt
					{
					    $$ = $1;
						$$.stmtList.add($2.stmt);
					}
                |	/* empty */
                	{
                		$$.stmtList = new ArrayList<>();
                	}
                ;

SimpleStmt      :	LValue '=' Expr
					{
						$$.stmt = new Assign($1.lValue, $3.expr, $2.pos);
					}
                |	Call
                	{
                		$$.stmt = new ExprEval($1.expr, $1.expr.pos);
                	}
                |	/* empty */
                	{
						$$.stmt = null;
                	}
                ;

ElseClause      :	ELSE Stmt
					{
						$$ = $2;
					}
				|	/* empty */				%prec EMPTY
					{
						$$.stmt = null;
					}
                ;

ExprOpt			:	Expr
                    {
                        $$ = $1;
                    }
				|	/* empty */
					{
						$$.expr = null;
					}
				;

// Expressions

Expr            :	Literal
                    {
                        $$.expr = $1.expr;
                    }
				|	THIS
                	{
                		$$.expr = new This($1.pos);
                	}
				|	LValue
					{
						$$.expr = $1.lValue;
System.out.println("LValue="+$$.expr);
					}
                |	Call
                    {
                        $$ = $1;
                    }
                |	Expr '+' Expr
                	{
System.out.println("L="+$1.expr);
System.out.println("R="+$3.expr);
                		$$.expr = new Binary(BinaryOp.ADD, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '-' Expr
                	{
                		$$.expr = new Binary(BinaryOp.SUB, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '*' Expr
                	{
                		$$.expr = new Binary(BinaryOp.MUL, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '/' Expr
                	{
                		$$.expr = new Binary(BinaryOp.DIV, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '%' Expr
                	{
                		$$.expr = new Binary(BinaryOp.MOD, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr EQUAL Expr
                	{
                		$$.expr = new Binary(BinaryOp.EQ, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr NOT_EQUAL Expr
                	{
                		$$.expr = new Binary(BinaryOp.NE, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '<' Expr
                	{
                		$$.expr = new Binary(BinaryOp.LT, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '>' Expr
                	{
                		$$.expr = new Binary(BinaryOp.GT, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr LESS_EQUAL Expr
                	{
                		$$.expr = new Binary(BinaryOp.LE, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr GREATER_EQUAL Expr
                	{
                		$$.expr = new Binary(BinaryOp.GE, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr AND Expr
                	{
                		$$.expr = new Binary(BinaryOp.AND, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr OR Expr
                	{
                		$$.expr = new Binary(BinaryOp.OR, $1.expr, $3.expr, $2.pos);
                	}
                |	'(' Expr ')'
                	{
                		$$ = $2;
                	}
                |	'-' Expr  				%prec UMINUS
                	{
                		$$.expr = new Unary(UnaryOp.NEG, $2.expr, $1.pos);
                	}
                |	'!' Expr
                	{
                		$$.expr = new Unary(UnaryOp.NOT, $2.expr, $1.pos);
                	}
                |	READ_INTEGER '(' ')'
                	{
                		$$.expr = new ReadInt($1.pos);
                	}
                |	READ_LINE '(' ')'
                	{
                		$$.expr = new ReadLine($1.pos);
                	}
                |	NEW Id '(' ')'
                	{
                		$$.expr = new NewClass($2.id, $1.pos);
                	}
                |	NEW Type '[' Expr ']'
                	{
                		$$.expr = new NewArray($2.type, $4.expr, $1.pos);
                	}
                |	INSTANCE_OF '(' Expr ',' Id ')'
                	{
                		$$.expr = new ClassTest($3.expr, $5.id, $1.pos);
                	}
                |	'(' CLASS Id ')' Expr
                	{
                		$$.expr = new ClassCast($5.expr, $3.id, $5.expr.pos);
                	}
                ;

Literal        	:	INT_LIT
					{
						$$.expr = new IntLit($1.intLit, $1.pos);
					}
			    |   BOOL_LIT
			        {
			            $$.expr = new BoolLit($1.boolLit, $1.pos);
			        }
			    |   STRING_LIT
			        {
			            $$.expr = new StringLit($1.stringLit, $1.pos);
			        }
                |	NULL
                	{
						$$.expr = new NullLit($1.pos);
					}
                ;

LValue          :	Receiver Id
					{
System.out.println("var sel");
System.out.println($1.expr);
System.out.println($2.id);
						$$.lValue = new VarSel(Optional.ofNullable($1.expr), $2.id, $2.pos);
						// TODO check pos
					}
                |	Expr '[' Expr ']'
                	{
System.out.println("index sel");
System.out.println($1.expr);
System.out.println($2.expr);
System.out.println($3.expr);
System.out.println($4.expr);
                		$$.lValue = new IndexSel($1.expr, $3.expr, $2.pos);
                	}
                ;

Call            :	Receiver Id '(' ExprList ')'
					{
						$$.expr = new Call(Optional.ofNullable($1.expr), $2.id, $4.exprList, $3.pos);
						if ($1.expr == null) {
							$$.pos = $2.pos;
						}
					}
                ;

Receiver     	:	Expr '.'
					{
						$$ = $1;
					}
                |	/* empty */
                	{
                		$$.expr = null;
                	}
                ;

ExprList        :	ExprList1
                    {
                        $$ = $1;
                    }
                |	/* empty */
                	{
                		$$.exprList = new ArrayList<>();
                	}
                ;

ExprList1       :	ExprList1 ',' Expr
					{
						$$ = $1;
						$$.exprList.add($3.expr);
					}
                |	Expr
                	{
                		$$.exprList = new ArrayList<>();
						$$.exprList.add($1.expr);
                	}
                ;

// identifier

Id              :   IDENTIFIER
                    {
                        $$ = $1;
                        $$.id = new Id($1.identifier, $1.pos);
                    }
                ;

%%