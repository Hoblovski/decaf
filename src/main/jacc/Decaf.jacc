%package decaf.parsing

%{
import decaf.tree.Tree.*;
import decaf.tree.*;
import decaf.error.*;
import java.util.*;
%}

%class DecafParser
%extends AbstractParser
%interface DecafTokens
%next nextToken()
%get token
%semantic SemValue : semValue

%token VOID   BOOL  INT   STRING  CLASS
%token NULL   EXTENDS     THIS     WHILE   FOR
%token IF     ELSE        RETURN   BREAK   NEW
%token PRINT  READ_INTEGER         READ_LINE
%token INT_LIT BOOL_LIT STRING_LIT
%token IDENTIFIER	  AND    OR    STATIC  INSTANCE_OF
%token LESS_EQUAL   GREATER_EQUAL  EQUAL   NOT_EQUAL
%token '+'  '-'  '*'  '/'  '%'  '='  '>'  '<'  '.'
%token ','  ';'  '!'  '('  ')'  '['  ']'  '{'  '}'

%left OR
%left AND
%nonassoc EQUAL NOT_EQUAL
%nonassoc LESS_EQUAL GREATER_EQUAL '<' '>'
%left  '+' '-'
%left  '*' '/' '%'
%nonassoc UMINUS '!'
%nonassoc '[' '.'
%nonassoc ')' EMPTY
%nonassoc ELSE

%start Program

%%
Program			:	ClassList
					{
						tree = new Tree.TopLevel($1.classList, $1.pos);
					}
				;

ClassList       :	ClassList ClassDef
					{
					    $$ = $1;
						$$.classList.add($2.clazz);
					}
                |	ClassDef
                	{
                		$$.classList = new ArrayList<>();
                		$$.classList.add($1.clazz);
                	}
                ;

VariableDef     :	Variable ';'
                    {
                        $$ = $1;
                    }
				;

Variable        :	Type Id
					{
						$$.var = new Tree.Var($1.type, $2.id, $2.pos);
					}
				;

Type            :	INT
					{
						$$.type = new Tree.TInt($1.pos);
					}
                |	VOID
                	{
                		$$.type = new Tree.TVoid($1.pos);
                	}
                |	BOOL
                	{
                		$$.type = new Tree.TBool($1.pos);
                	}
                |	STRING
                	{
                		$$.type = new Tree.TString($1.pos);
                	}
                |	CLASS Id
                	{
                		$$.type = new Tree.TClass($2.id, $1.pos);
                	}
                |	Type '[' ']'
                	{
                		$$.type = new Tree.TArray($1.type, $1.pos);
                	}
                ;

ClassDef        :	CLASS Id ExtendsClause '{' FieldList '}'
					{
						$$.clazz = new Tree.ClassDef($2.id, Optional.ofNullable($3.id), $5.fieldList, $1.pos);
					}
                ;

ExtendsClause	:	EXTENDS Id
					{
						$$.id = $2.id;
					}
                |	/* empty */
                	{
                		$$ = new SemValue();
                	}
                ;

FieldList       :	FieldList VariableDef
					{
					    $$ = $1;
						$$.fieldList.add(new VarDef($2.var));
					}
				|	FieldList FunctionDef
					{
					    $$ = $1;
						$$.fieldList.add($2.field);
					}
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.fieldList = new ArrayList<>();
                	}
                ;

Formals         :	VariableList
                    {
                        $$ = $1;
                    }
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.varList = new ArrayList<>();
                	}
                ;

VariableList    :	VariableList ',' Variable
					{
					    $$ = $1;
						$$.varList.add(new LocalVarDef($3.var));
					}
                |	Variable
                	{
                		$$.varList = new ArrayList<>();
						$$.varList.add(new LocalVarDef($1.var));
                	}
                ;

FunctionDef    :	STATIC Type Id '(' Formals ')' StmtBlock
					{
						$$.field = new MethodDef(true, $3.id, $2.type, $5.varList, (Block) $7.stmt, $3.pos);
					}
				|	Type Id '(' Formals ')' StmtBlock
					{
						$$.field = new MethodDef(false, $2.id, $1.type, $4.varList, (Block) $6.stmt, $2.pos);
					}
                ;

StmtBlock       :	'{' StmtList '}'
					{
						$$.stmt = new Block($2.stmtList, $1.pos);
					}
                ;

StmtList        :	StmtList Stmt
					{
					    $$ = $1;
						$$.stmtList.add($2.stmt);
					}
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.stmtList = new ArrayList<>();
                	}
                ;

Stmt		    :	VariableDef
					{
						$$.stmt = new LocalVarDef($1.var);
					}

                |	SimpleStmt ';'
                	{
                		if ($$.stmt == null) {
                			$$.stmt = new Tree.Skip($2.pos);
                		}
                	}
                |	IfStmt
                |	WhileStmt
                |	ForStmt
                |	ReturnStmt ';'
                |	PrintStmt ';'
                |	BreakStmt ';'
                |	StmtBlock
                ;

SimpleStmt      :	LValue '=' Expr
					{
						$$.stmt = new Tree.Assign($1.lValue, $3.expr, $2.pos);
					}
                |	Call
                	{
                		$$.stmt = new Tree.ExprEval($1.expr, $1.pos);
                	}
                |	/* empty */
                	{
                		$$ = new SemValue();
                	}
                ;

Receiver     	:	Expr '.'
                    {
                        $$ = $1;
                    }
                |	/* empty */
                	{
                		$$ = new SemValue();
                	}
                ;

LValue          :	Receiver Id
					{
						$$.lValue = new VarSel(Optional.ofNullable($1.expr), $2.id, $2.pos);
						if ($1.pos == null) {
							$$.pos = $2.pos;
						}
					}
                |	Expr '[' Expr ']'
                	{
                		$$.lValue = new Tree.IndexSel($1.expr, $3.expr, $1.pos);
                	}
                ;

Call            :	Receiver Id '(' Actuals ')'
					{
						$$.expr = new Tree.Call(Optional.ofNullable($1.expr), $2.id, $4.exprList, $2.pos);
						if ($1.pos == null) {
							$$.pos = $2.pos;
						}
					}
                ;

Expr            :	LValue
					{
						$$.expr = $1.lValue;
					}
                |	Call
                    {
                        $$ = $1;
                    }
                |	Constant
                    {
                        $$ = $1;
                    }
                |	Expr '+' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.ADD, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '-' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.SUB, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '*' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.MUL, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '/' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.DIV, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '%' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.MOD, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.EQ, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr NOT_EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.NE, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '<' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.LT, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr '>' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.GT, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr LESS_EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.LE, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr GREATER_EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.GE, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr AND Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.AND, $1.expr, $3.expr, $2.pos);
                	}
                |	Expr OR Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.OR, $1.expr, $3.expr, $2.pos);
                	}
                |	'(' Expr ')'
                	{
                		$$ = $2;
                	}
                |	'-' Expr  				%prec UMINUS
                	{
                		$$.expr = new Tree.Unary(UnaryOp.NEG, $2.expr, $1.pos);
                	}
                |	'!' Expr
                	{
                		$$.expr = new Tree.Unary(UnaryOp.NOT, $2.expr, $1.pos);
                	}
                |	READ_INTEGER '(' ')'
                	{
                		$$.expr = new Tree.ReadInt($1.pos);
                	}
                |	READ_LINE '(' ')'
                	{
                		$$.expr = new Tree.ReadLine($1.pos);
                	}
                |	THIS
                	{
                		$$.expr = new Tree.This($1.pos);
                	}
                |	NEW Id '(' ')'
                	{
                		$$.expr = new Tree.NewClass($2.id, $1.pos);
                	}
                |	NEW Type '[' Expr ']'
                	{
                		$$.expr = new Tree.NewArray($2.type, $4.expr, $1.pos);
                	}
                |	INSTANCE_OF '(' Expr ',' Id ')'
                	{
                		$$.expr = new Tree.ClassTest($3.expr, $5.id, $1.pos);
                	}
                |	'(' CLASS Id ')' Expr
                	{
                		$$.expr = new Tree.ClassCast($5.expr, $3.id, $5.pos);
                	}
                ;

Constant        :	INT_LIT
					{
						$$.expr = new IntLit($1.intLit, $1.pos);
					}
			    |   BOOL_LIT
			        {
			            $$.expr = new BoolLit($1.boolLit, $1.pos);
			        }
			    |   STRING_LIT
			        {
			            $$.expr = new StringLit($1.stringLit, $1.pos);
			        }
                |	NULL
                	{
						$$.expr = new NullLit($1.pos);
					}
                ;

Actuals         :	ExprList
                    {
                        $$ = $1;
                    }
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.exprList = new ArrayList<>();
                	}
                ;

ExprList        :	ExprList ',' Expr
					{
					    $$ = $1;
						$$.exprList.add($3.expr);
					}
                |	Expr
                	{
                		$$.exprList = new ArrayList<>();
						$$.exprList.add($1.expr);
                	}
                ;

WhileStmt       :	WHILE '(' Expr ')' Stmt
					{
						$$.stmt = new Tree.While($3.expr, $5.stmt, $1.pos);
					}
                ;

ForStmt         :	FOR '(' SimpleStmt ';' Expr ';'	SimpleStmt ')' Stmt
					{
						$$.stmt = new Tree.For($3.stmt, $5.expr, $7.stmt, $9.stmt, $1.pos);
					}
                ;

BreakStmt       :	BREAK
					{
						$$.stmt = new Tree.Break($1.pos);
					}
                ;

IfStmt          :	IF '(' Expr ')' Stmt ElseClause
					{
						$$.stmt = new Tree.If($3.expr, $5.stmt, Optional.ofNullable($6.stmt), $1.pos);
					}
                ;

ElseClause      :	ELSE Stmt
					{
						$$.stmt = $2.stmt;
					}
				|	/* empty */				%prec EMPTY
					{
						$$ = new SemValue();
					}
                ;

ReturnStmt      :	RETURN Expr
					{
						$$.stmt = new Tree.Return(Optional.ofNullable($2.expr), $1.pos);
					}
                |	RETURN
                	{
                		$$.stmt = new Tree.Return(Optional.ofNullable(null), $1.pos);
                	}
                ;

PrintStmt       :	PRINT '(' ExprList ')'
					{
						$$.stmt = new Print($3.exprList, $1.pos);
					}
                ;

Id              :   IDENTIFIER
                    {
                        $$ = $1;
                        $$.id = new Id($1.identifier, $1.pos);
                    }
                ;
%%
