/*
 * 本文件提供实现Decaf编译器所需要的BYACC脚本。
 * 在第一阶段中你需要补充完整这个文件中的语法规则。
 * 请参考"YACC--Yet Another Compiler Compiler"中关于如何编写BYACC脚本的说明。
 * 
 * Keltin Leung
 * DCST, Tsinghua University
 */

%package decaf.parsing

%{
import decaf.tree.Tree;
import decaf.tree.Tree.*;
import decaf.error.*;
import java.util.*;
%}

%class DecafParser
%extends AbstractParser
%interface DecafTokens
%next nextToken()
%get token
%semantic SemValue: semValue

%token VOID   BOOL  INT   STRING  CLASS 
%token NULL   EXTENDS     THIS     WHILE   FOR   
%token IF     ELSE        RETURN   BREAK   NEW
%token PRINT  READ_INTEGER         READ_LINE
%token BOOL_LIT INT_LIT STRING_LIT
%token IDENTIFIER   AND    OR    STATIC  INSTANCEOF
%token LESS_EQUAL   GREATER_EQUAL  EQUAL   NOT_EQUAL
%token '+'  '-'  '*'  '/'  '%'  '='  '>'  '<'  '.'
%token ','  ';'  '!'  '('  ')'  '['  ']'  '{'  '}'

%left OR
%left AND 
%nonassoc EQUAL NOT_EQUAL
%nonassoc LESS_EQUAL GREATER_EQUAL '<' '>'
%left  '+' '-'
%left  '*' '/' '%'  
%nonassoc UMINUS '!' 
%nonassoc '[' '.' 
%nonassoc ')' EMPTY
%nonassoc ELSE

%start Program

%%
Program			:	ClassList
					{
						tree = new Tree.TopLevel($1.clist, $1.loc);
					}
				;

ClassList       :	ClassList ClassDef
					{
						$$.clist.add($2.cdef);
					}
                |	ClassDef
                	{
                		$$.clist = new ArrayList<>();
                		$$.clist.add($1.cdef);
                	}
                ;

VariableDef     :	Variable ';'
				;

Variable        :	Type Id
					{
						$$.vdef = new Tree.VarDef($1.type, $2.id, $2.loc);
					}
				;
				
Type            :	INT
					{
						$$.type = new Tree.TInt($1.loc);
					}
                |	VOID
                	{
                		$$.type = new Tree.TVoid($1.loc);
                	}
                |	BOOL
                	{
                		$$.type = new Tree.TBool($1.loc);
                	}
                |	STRING
                	{
                		$$.type = new Tree.TString($1.loc);
                	}
                |	CLASS Id
                	{
                		$$.type = new Tree.TClass($2.id, $1.loc);
                	}
                |	Type '[' ']'
                	{
                		$$.type = new Tree.TArray($1.type, $1.loc);
                	}
                ;

ClassDef        :	CLASS Id ExtendsClause '{' FieldList '}'
					{
						$$.cdef = new Tree.ClassDef($2.id, Optional.ofNullable($3.id), $5.flist, $1.loc);
					}
                ;

ExtendsClause	:	EXTENDS Id
					{
						$$.id = $2.id;
					}
                |	/* empty */
                	{
                	    $$ = new SemValue();
                	}
                ;

FieldList       :	FieldList VariableDef
					{
						$$.flist.add($2.vdef);
					}
				|	FieldList FunctionDef
					{
						$$.flist.add($2.fdef);
					}
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.flist = new ArrayList<>();
                	}
                ;
 
Formals         :	VariableList
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.vlist = new ArrayList<>();
                	}
                ;

VariableList    :	VariableList ',' LocalVar
					{
						$$.lvlist.add($3.lvdef);
					}
                |	LocalVar
                	{
                		$$.lvlist = new ArrayList<>();
						$$.lvlist.add($1.lvdef);
                	}
                ;

LocalVar        :	Type Id
					{
						$$.lvdef = new Tree.LocalVarDef($1.type, $2.id, $2.loc);
					}
				;

FunctionDef    :	STATIC Type Id '(' Formals ')' StmtBlock
					{
						$$.fdef = new MethodDef(true, $3.id, $2.type, $5.lvlist, (Block) $7.stmt, $3.loc);
					}
				|	Type Id '(' Formals ')' StmtBlock
					{
						$$.fdef = new MethodDef(false, $2.id, $1.type, $4.lvlist, (Block) $6.stmt, $2.loc);
					}
                ;

StmtBlock       :	'{' StmtList '}'
					{
						$$.stmt = new Block($2.slist, $1.loc);
					}
                ;
	
StmtList        :	StmtList Stmt
					{
						$$.slist.add($2.stmt);
					}
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.slist = new ArrayList<>();
                	}
                ;

Stmt		    :	LocalVar ';'
					{
						$$.stmt = $1.lvdef;
					}
					
                |	SimpleStmt ';'
                	{
                		if ($$.stmt == null) {
                			$$.stmt = new Tree.Skip($2.loc);
                		}
                	}
                |	IfStmt
                |	WhileStmt
                |	ForStmt
                |	ReturnStmt ';'
                |	PrintStmt ';'
                |	BreakStmt ';'
                |	StmtBlock
                ;

SimpleStmt      :	LValue '=' Expr
					{
						$$.stmt = new Tree.Assign($1.lvalue, $3.expr, $2.loc);
					}
                |	Call
                	{
                		$$.stmt = new ExprEval($1.expr, $1.loc);
                	}
                |	/* empty */
                	{
                		$$ = new SemValue();
                	}
                ;

Receiver     	:	Expr '.'
                |	/* empty */
                	{
                		$$ = new SemValue();
                	}
                ;

LValue          :	Receiver Id
					{
						$$.lvalue = new Tree.VarSel(Optional.ofNullable($1.expr), $2.id, $2.loc);
						if ($1.loc == null) {
							$$.loc = $2.loc;
						}
					}
                |	Expr '[' Expr ']'
                	{
                		$$.lvalue = new Tree.IndexSel($1.expr, $3.expr, $1.loc);
                	}
                ;

Call            :	Receiver Id '(' Actuals ')'
					{
						$$.expr = new Tree.Call(Optional.ofNullable($1.expr), $2.id, $4.elist, $2.loc);
						if ($1.loc == null) {
							$$.loc = $2.loc;
						}
					}
                ;

Expr            :	LValue
					{
						$$.expr = $1.lvalue;
					}
                |	Call
                |	Constant
                |	Expr '+' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.ADD, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr '-' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.SUB, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr '*' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.MUL, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr '/' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.DIV, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr '%' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.MOD, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.EQ, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr NOT_EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.NE, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr '<' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.LT, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr '>' Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.GT, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr LESS_EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.LE, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr GREATER_EQUAL Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.GE, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr AND Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.AND, $1.expr, $3.expr, $2.loc);
                	}
                |	Expr OR Expr
                	{
                		$$.expr = new Tree.Binary(BinaryOp.OR, $1.expr, $3.expr, $2.loc);
                	}
                |	'(' Expr ')'
                	{
                		$$ = $2;
                	}
                |	'-' Expr  				%prec UMINUS
                	{
                		$$.expr = new Tree.Unary(UnaryOp.NEG, $2.expr, $1.loc);
                	}
                |	'!' Expr
                	{
                		$$.expr = new Tree.Unary(UnaryOp.NOT, $2.expr, $1.loc);
                	}
                |	READ_INTEGER '(' ')'
                	{
                		$$.expr = new Tree.ReadInt($1.loc);
                	}
                |	READ_LINE '(' ')'
                	{
                		$$.expr = new Tree.ReadLine($1.loc);
                	}
                |	THIS
                	{
                		$$.expr = new Tree.This($1.loc);
                	}
                |	NEW Id '(' ')'
                	{
                		$$.expr = new Tree.NewClass($2.id, $1.loc);
                	}
                |	NEW Type '[' Expr ']'
                	{
                		$$.expr = new Tree.NewArray($2.type, $4.expr, $1.loc);
                	}
                |	INSTANCEOF '(' Expr ',' Id ')'
                	{
                		$$.expr = new ClassTest($3.expr, $5.id, $1.loc);
                	}
                |	'(' CLASS Id ')' Expr
                	{
                		$$.expr = new ClassCast($5.expr, $3.id, $5.loc);
                	}
                ;
	
Constant        :	INT_LIT
					{
						$$.expr = new IntLit($1.intValue, $1.loc);
					}
			    |   BOOL_LIT
			        {
			            $$.expr = new BoolLit($1.boolValue, $1.loc);
			        }
			    |   STRING_LIT
			        {
			            $$.expr = new StringLit($1.stringValue, $1.loc);
			        }
                |	NULL
                	{
						$$.expr = new NullLit($1.loc);
					}
                ;

Actuals         :	ExprList
                |	/* empty */
                	{
                		$$ = new SemValue();
                		$$.elist = new ArrayList<>();
                	}
                ;

ExprList        :	ExprList ',' Expr
					{
						$$.elist.add($3.expr);
					}
                |	Expr
                	{
                		$$.elist = new ArrayList<>();
						$$.elist.add($1.expr);
                	}
                ;
    
WhileStmt       :	WHILE '(' Expr ')' Stmt
					{
						$$.stmt = new Tree.While($3.expr, $5.stmt, $1.loc);
					}
                ;

ForStmt         :	FOR '(' SimpleStmt ';' Expr ';'	SimpleStmt ')' Stmt
					{
						$$.stmt = new Tree.For($3.stmt, $5.expr, $7.stmt, $9.stmt, $1.loc);
					}
                ;

BreakStmt       :	BREAK
					{
						$$.stmt = new Tree.Break($1.loc);
					}
                ;

IfStmt          :	IF '(' Expr ')' Stmt ElseClause
					{
						$$.stmt = new Tree.If($3.expr, $5.stmt, Optional.ofNullable($6.stmt), $1.loc);
					}
                ;

ElseClause      :	ELSE Stmt
					{
						$$.stmt = $2.stmt;
					}
				|	/* empty */				%prec EMPTY
					{
						$$ = new SemValue();
					}
                ;

ReturnStmt      :	RETURN Expr
					{
						$$.stmt = new Tree.Return(Optional.of($2.expr), $1.loc);
					}
                |	RETURN
                	{
                		$$.stmt = new Tree.Return(Optional.empty(), $1.loc);
                	}
                ;

PrintStmt       :	PRINT '(' ExprList ')'
					{
						$$.stmt = new Print($3.elist, $1.loc);
					}
                ;

Id              :   IDENTIFIER
                    {
                        $$.id = new Id($1.ident, $1.loc);
                    }
                ;

%%